//
// Mixins
// --------------------------------------------------

// UTILITY MIXINS
// --------------------------------------------------

// IE7 inline-block
// ----------------
.ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
.ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

.ie7-restore-right-whitespace() {
  *margin-right: .3em;
}

// FONTS
// --------------------------------------------------

#font {
  #family {
    .serif() {
      font-family: @serifFontFamily;
    }
    .sans-serif() {
      font-family: @sansFontFamily;
    }
    .monospace() {
      font-family: @monoFontFamily;
    }
  }
  .shorthand(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    font-size: @size;
    font-weight: @weight;
    line-height: @lineHeight;
  }
  .serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font > #family > .serif;
    #font > .shorthand(@size, @weight, @lineHeight);
  }
  .sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font > #family > .sans-serif;
    #font > .shorthand(@size, @weight, @lineHeight);
  }
  .monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font > #family > .monospace;
    #font > .shorthand(@size, @weight, @lineHeight);
  }
}

// FORMS
// --------------------------------------------------

// Block level inputs
.input-block-level {
  display: block;
  width: 100%;
  min-height: @inputHeight; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  .box-sizing(border-box); // Makes inputs behave like true block-level elements
}

// Mixin for form field states
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  // Set the text color
  .control-label,
  .help-block,
  .help-inline {
    color: @textColor;
  }
  // Style inputs accordingly
  .checkbox,
  .radio,
  input,
  select,
  textarea {
    color: @textColor;
  }
  input,
  select,
  textarea {
    border-color: @borderColor;
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@borderColor, 10%);
      @shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px lighten(@borderColor, 20%);
      .box-shadow(@shadow);
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: @textColor;
    background-color: @backgroundColor;
    border-color: @textColor;
  }
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Border Radius
.border-radius(@radius) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}

// Single Corner Border Radius
.border-top-left-radius(@radius) {
  -webkit-border-top-left-radius: @radius;
  -moz-border-radius-topleft: @radius;
  border-top-left-radius: @radius;
}

.border-top-right-radius(@radius) {
  -webkit-border-top-right-radius: @radius;
  -moz-border-radius-topright: @radius;
  border-top-right-radius: @radius;
}

.border-bottom-right-radius(@radius) {
  -webkit-border-bottom-right-radius: @radius;
  -moz-border-radius-bottomright: @radius;
  border-bottom-right-radius: @radius;
}

.border-bottom-left-radius(@radius) {
  -webkit-border-bottom-left-radius: @radius;
  -moz-border-radius-bottomleft: @radius;
  border-bottom-left-radius: @radius;
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
  -webkit-background-clip: @clip;
  -moz-background-clip: @clip;
  background-clip: @clip;
}

// Background sizing
.background-size(@size) {
  -webkit-background-size: @size;
  -moz-background-size: @size;
  -o-background-size: @size;
  background-size: @size;
}

// CSS3 Content Columns
.content-columns(@columnCount, @columnGap: @gridGutterWidth) {
  -webkit-column-count: @columnCount;
  -moz-column-count: @columnCount;
  column-count: @columnCount;
  -webkit-column-gap: @columnGap;
  -moz-column-gap: @columnGap;
  column-gap: @columnGap;
}

// CSS3 Flexible Box Module
#flexbox {
  // #flexbox > .display-box; must be used along with other flexbox mixins
  .display-box {
    display: -moz-box;
    display: -webkit-box;
    display: box;
  }
  // Box align [ start | end | center | baseline | stretch ]
  .box-align(@alignment: stretch) {
    -moz-box-align: @alignment;
    -webkit-box-align: @alignment;
    box-align: @alignment;
  }
  // Box direction [ normal | reverse | inherit ]
  .box-direction(@direction: normal) {
    -moz-box-direction: @direction;
    -webkit-box-direction: @direction;
    box-direction: @direction;
  }
  // Box flex [ integer ]
  .box-flex(@flex: 0) {
    -moz-box-flex: @flex;
    -webkit-box-flex: @flex;
    box-flex: @flex;
  }
  // Box flex group [ integer ]
  .box-flex-group(@group: 1) {
    -moz-box-flex-group: @group;
    -webkit-box-flex-group: @group;
    box-flex-group: @group;
  }
  // Box orientation [ horizontal | vertical | inline-axis | block-axis | inherit ]
  .box-orient(@orientation: horizontal) {
    -moz-box-orient: @orientation;
    -webkit-box-orient: @orientation;
    box-orient: @orientation;
  }
  // Box ordinal group [ integer ]
  .box-ordinal-group(@group: 1) {
    -moz-box-ordinal-group: @group;
    -webkit-box-ordinal-group:@group;
    box-flex-ordinal-group: @group;
  }
  // Box pack  [ start | end | center | justify ]
  .box-pack(@pack: start) {
    -moz-box-pack: @pack;
    -webkit-box-pack: @pack;
    box-pack: @pack;
  }
}

// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
#translucent {
  .background(@color: @white, @alpha: 1) {
    background-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
  }
  .border(@color: @white, @alpha: 1) {
    border-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
    .background-clip(padding-box);
  }
}

// Gradient Bar Colors for buttons and alerts
.gradientBar(@primaryColor, @secondaryColor, @textColor: #fff, @textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
  color: @textColor;
  #gradient > .vertical(@primaryColor, @secondaryColor, 0%, 100%);
  border-color: @secondaryColor @secondaryColor darken(@secondaryColor, 15%);
  border-color: rgba(0, 0, 0, .1) rgba(0, 0, 0, .1) fadein(rgba(0, 0, 0, .1), 15%);
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@top: #e5e5e5, @bottom: @white) {
  // IE7 needs a set width since we gave a height. Restricting just
  // to IE7 to keep the 1px left/right space in other browsers.
  // It is unclear where IE is getting the extra space that we need
  // to negative-margin away, but so it goes.
  *width: 100%;
  height: 1px;
  margin: 5px 0;
  *margin: -5px 0 5px;
  overflow: hidden;
  background-color: @top;
  border-bottom: 1px solid @bottom;
}

// Button backgrounds
// ------------------
.buttonBackground(@startColor, @endColor, @textColor: #fff, @textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  .gradientBar(@startColor, @endColor, @textColor, @textShadow);
  *background-color: @endColor; /* Darken IE7 buttons by default so they stand out more given they won't have borders */
  .reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    color: @textColor;
    background-color: @endColor;
    *background-color: darken(@endColor, 5%);
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken(@endColor, 10%) e("\9");
  }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
.navbarVerticalAlign(@elementHeight) {
  margin-top: (@navbarHeight - @elementHeight) / 2;
}

// Table columns
.tableColumns(@columnSpan: 1) {
  float: none; // undo default grid column styles
  width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
  margin-left: @gridGutterWidth * -1;
  .clearfix();
}

.makeColumn(@columns: 1, @offset: 0) {
  float: left;
  margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) + (@gridGutterWidth * 2);
  width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {

  .core (@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index);
      }
      .offsetX(@index - 1);
    }
    .offsetX (0) {
    }

    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
    }

    .span (@columns) {
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    }

    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }

    [class*="span"] {
      float: left;
      min-height: 1px; // prevent collapsing columns
      margin-left: @gridGutterWidth;
    }

    // Set the container width, and override it for fixed navbars in media queries
    .container,
    .navbar-static-top .container,
    .navbar-fixed-top .container,
    .navbar-fixed-bottom .container { .span(@gridColumns);
    }

    // generate .spanX and .offsetX
    .spanX (@gridColumns);
    .offsetX (@gridColumns);

  }

  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index);
      }
      .offset@{index}:first-child { .offsetFirstChild(@index);
      }
      .offsetX(@index - 1);
    }
    .offsetX (0) {
    }

    .offset (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .offsetFirstChild (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
    }

    .span (@columns) {
      width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
      *width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .row-fluid {
      width: 100%;
      .clearfix();
      [class*="span"] {
        .input-block-level();
        float: left;
        margin-left: @fluidGridGutterWidth;
        *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
      }
      [class*="span"]:first-child {
        margin-left: 0;
      }

      // Space grid-sized controls properly if multiple per line
      .controls-row [class*="span"] + [class*="span"] {
        margin-left: @fluidGridGutterWidth;
      }

      // generate .spanX and .offsetX
      .spanX (@gridColumns);
      .offsetX (@gridColumns);
    }

  }

  .input(@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index} { .span(@index);
      }
      .spanX(@index - 1);
    }
    .spanX (0) {
    }

    .span(@columns) {
      width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
    }

    input,
    textarea,
    .uneditable-input {
      margin-left: 0; // override margin-left from core grid system
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*="span"] + [class*="span"] {
      margin-left: @gridGutterWidth;
    }

    // generate .spanX
    .spanX (@gridColumns);

  }

}

// site special mixins(self added)
// ---------------------------------------------------------

// site rectangle avatar & logo
// --------------------------
.square-avatar(@size) {
  .square(@size);
  .background-size(@size);
  .border-radius(@baseBorderRadius);
  background-repeat: no-repeat;
}

.square-image(@size) {
  .square(@size);
  .background-size(@size);
  .border-radius(@baseBorderRadius);
  background-repeat: no-repeat;
}

// txt styles
.baseText() {
  color: @darkTextColor;
  font-size: @baseFontSize;
  font-weight: normal;
}

.titleText() {
  color: @grayDarker;
  font-size: @baseFontSize;
  font-weight: bold;
}

.postContentText() {
  color: @black;
  font-size: @fontSizeLarge;
  font-weight: normal;
}

.secondaryText() {
  color: @grayTextColor;
  font-size: @fontSizeSmall;
  font-weight: normal;
}

.timestampText() {
  color: @grayTextColor;
}

.columnMenuText() {
  color: @columnMenuTextActiveColor;
  font-weight: bold;
}

.infoText() {
  color: @lightTextColor;
  font-size: @fontSizeSmall;
}

.contentBoxHoverShadow() {
  border: 1px solid rgba(0, 0, 0, 0.21);
}

// editable input style
.editable-input() {
  border: 1px solid transparent;
  background-color: transparent;
  &:focus {
    border: 1px solid @grayLighter;
    outline: none;
    background-color: @white;
  }
}

.dropdown-menu-corner() {
  :before {
    position: absolute;
    top: -14px;
    left: 7px;
    content: "";
    border: 7px solid transparent;
    border-bottom: 7px solid @popWindowBackgroundColor;
  }
}

// divide line style
// ---------------------------
.divide-line() {
  margin: 0;
  .size(100%, 0px);
  border-top: 1px solid #d6d6d6;
  border-bottom: 1px solid #FFF;
}

.dashed-divide-line() {
  margin: 0;
  .size(100%, 0px);
  border-top: 1px dashed #d6d6d6;
  border-bottom: 1px dashed #FFF;
}

.dotted-divide-line() {
  margin: 0;
  .size(100%, 0px);
  border-top: 1px dotted #d6d6d6;
  border-bottom: 1px dotted #FFF;
}


// Button pseudo states
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.btn-pseudo-states(@color, @background, @border) {
  color: @color;
  background-color: @background;
  border-color: @border;

  &:hover,
  &:focus,
  &:active,
  &.active,
  .open .dropdown-toggle& {
    color: @color;
    background-color: lighten(@background, 5%);
    border-color: lighten(@border, 5%);
  }

  &:active,
  &.active {
    color: @color;
    background-color: darken(@background, 5%);
    border-color: @border;
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: @background;
      border-color: @border
    }
  }

  .badge {
    color: @background;
    background-color: @color;
  }
}

// Transformations
.transform(@value) {
  -webkit-transform: @value;
  -moz-transform: @value;
  -ms-transform: @value;
  -o-transform: @value;
  transform: @value;
}
